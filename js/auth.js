/**
 * @file auth.js
 * @description X·ª≠ l√Ω logic x√°c th·ª±c ng∆∞·ªùi d√πng (ƒêƒÉng k√Ω, ƒêƒÉng nh·∫≠p, ƒêƒÉng xu·∫•t, Qu√™n m·∫≠t kh·∫©u).
 */
import { auth, db } from './firebase.js';
import { showNotification } from './notifications.js';
import * as DOM from './dom.js'; // Import DOM for password toggle

export function setupUI(user, { authModal, appContainer, authStatusEl, logoutButton }) {
    if (!authModal || !appContainer || !authStatusEl || !logoutButton) {
        return;
    }

    if (user) {
        let displayName = user.displayName;
        if (!displayName && user.email) {
            displayName = user.email.split('@')[0];
        }
        if (!displayName) {
            displayName = "Ng∆∞·ªùi d√πng"; // Fallback
        }
        authStatusEl.textContent = `Xin ch√†o, ${displayName}`;
        
        if (!user.emailVerified) {
             authStatusEl.innerHTML += ` <small style="color:orange;">(Ch∆∞a x√°c th·ª±c)</small>`;
        }
        logoutButton.style.display = 'inline-block';
        
        authModal.style.display = 'none';
        appContainer.style.display = 'block';
    } else {
        authModal.style.display = 'flex';
        appContainer.style.display = 'none';
    }
}

export function initAuthForms({ loginForm, signupForm, loginErrorEl, signupErrorEl, showSignupLink, showLoginLink, logoutButton }) {
    
    const forgotPasswordLink = document.getElementById('forgot-password-link');
    const loginPasswordInput = DOM.loginForm ? DOM.loginForm['login-password'] : null;
    const toggleLoginPasswordBtn = DOM.toggleLoginPasswordButton;


    if (!loginForm || !signupForm || !showSignupLink || !showLoginLink || !logoutButton || !forgotPasswordLink) {
        return;
    }

    showSignupLink.addEventListener('click', (e) => {
        e.preventDefault();
        loginForm.style.display = 'none';
        signupForm.style.display = 'block';
    });

    showLoginLink.addEventListener('click', (e) => {
        e.preventDefault();
        signupForm.style.display = 'none';
        loginForm.style.display = 'block';
    });

    signupForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const email = signupForm['signup-email'].value;
        const password = signupForm['signup-password'].value;
        signupErrorEl.textContent = '';
        
        auth.createUserWithEmailAndPassword(email, password)
            .then(userCredential => {
                const createdUser = userCredential.user;
                const now = new Date();
                const validUntil = new Date(new Date().setDate(now.getDate() + 7)); 
                const profileData = {
                    email: createdUser.email,
                    displayName: createdUser.email.split('@')[0], // Set initial displayName
                    accountCreatedAt: firebase.firestore.Timestamp.fromDate(now),
                    validUntil: firebase.firestore.Timestamp.fromDate(validUntil),
                    status: 'active_trial'
                };
                db.collection('users').doc(createdUser.uid).collection('settings').doc('profile').set(profileData);
                return createdUser.sendEmailVerification();
            })
            .then(() => {
                auth.signOut();
                alert('ƒêƒÉng k√Ω th√†nh c√¥ng! B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c 7 ng√†y d√πng th·ª≠. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n, sau ƒë√≥ quay l·∫°i trang n√†y ƒë·ªÉ ƒëƒÉng nh·∫≠p.');
                signupForm.style.display = 'none';
                loginForm.style.display = 'block';
            })
            .catch(err => {
                if (err.code === 'auth/email-already-in-use') {
                    signupErrorEl.textContent = 'Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.';
                } else if (err.code === 'auth/weak-password') {
                     signupErrorEl.textContent = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.';
                } else {
                    signupErrorEl.textContent = 'ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.';
                }
            });
    });

    loginForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const email = loginForm['login-email'].value;
        const password = loginPasswordInput ? loginPasswordInput.value : '';
        loginErrorEl.textContent = '';

        auth.signInWithEmailAndPassword(email, password)
            .then(userCredential => {
                if (!userCredential.user.emailVerified) {
                    auth.signOut();
                    showNotification('T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c. Vui l√≤ng ki·ªÉm tra email.', 'error');
                }
            })
            .catch(err => {
                let message = 'ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.'; 
                switch (err.code) {
                    case 'auth/user-not-found':
                        message = 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y.';
                        break;
                    case 'auth/wrong-password':
                        message = 'M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c. Vui l√≤ng th·ª≠ l·∫°i.';
                        break;
                    case 'auth/invalid-email':
                        message = 'ƒê·ªãa ch·ªâ email kh√¥ng h·ª£p l·ªá.';
                        break;
                    case 'auth/too-many-requests':
                        message = 'Ph√°t hi·ªán ho·∫°t ƒë·ªông b·∫•t th∆∞·ªùng. T√†i kho·∫£n ƒë√£ b·ªã t·∫°m kh√≥a, vui l√≤ng th·ª≠ l·∫°i sau.';
                        break;
                    case 'auth/invalid-credential': // More generic error for wrong email/password
                        message = 'Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ch√≠nh x√°c.';
                        break;
                }
                if(loginErrorEl) loginErrorEl.textContent = message;
            });
    });

    logoutButton.addEventListener('click', () => {
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?')) {
            auth.signOut();
        }
    });

    forgotPasswordLink.addEventListener('click', (e) => {
        e.preventDefault();
        const email = loginForm['login-email'].value;
        if (!email) {
            showNotification('Vui l√≤ng nh·∫≠p email c·ªßa b·∫°n v√†o √¥ Email ƒë·ªÉ l·∫•y l·∫°i m·∫≠t kh·∫©u.', 'error');
            loginForm['login-email'].focus();
            return;
        }

        auth.sendPasswordResetEmail(email)
            .then(() => {
                showNotification(`ƒê√£ g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u t·ªõi ${email}. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n.`, 'success');
            })
            .catch((error) => {
                if (error.code === 'auth/user-not-found') {
                    showNotification('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y.', 'error');
                } else {
                    showNotification('L·ªói khi g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i.', 'error');
                }
            });
    });

    // Password Toggle Functionality
    if (toggleLoginPasswordBtn && loginPasswordInput) {
        toggleLoginPasswordBtn.addEventListener('click', () => {
            const type = loginPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            loginPasswordInput.setAttribute('type', type);
            toggleLoginPasswordBtn.textContent = type === 'password' ? 'üëÅÔ∏è' : 'üôà';
            toggleLoginPasswordBtn.setAttribute('aria-label', type === 'password' ? 'Hi·ªán m·∫≠t kh·∫©u' : '·∫®n m·∫≠t kh·∫©u');
        });
    }
}